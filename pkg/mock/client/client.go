// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/client.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	message "github.com/yezzey-gp/yproxy/pkg/message"
)

// MockYproxyClient is a mock of YproxyClient interface.
type MockYproxyClient struct {
	ctrl     *gomock.Controller
	recorder *MockYproxyClientMockRecorder
}

// MockYproxyClientMockRecorder is the mock recorder for MockYproxyClient.
type MockYproxyClientMockRecorder struct {
	mock *MockYproxyClient
}

// NewMockYproxyClient creates a new mock instance.
func NewMockYproxyClient(ctrl *gomock.Controller) *MockYproxyClient {
	mock := &MockYproxyClient{ctrl: ctrl}
	mock.recorder = &MockYproxyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYproxyClient) EXPECT() *MockYproxyClientMockRecorder {
	return m.recorder
}

// ByteOffset mocks base method.
func (m *MockYproxyClient) ByteOffset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByteOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ByteOffset indicates an expected call of ByteOffset.
func (mr *MockYproxyClientMockRecorder) ByteOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByteOffset", reflect.TypeOf((*MockYproxyClient)(nil).ByteOffset))
}

// Close mocks base method.
func (m *MockYproxyClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockYproxyClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockYproxyClient)(nil).Close))
}

// ExternalFilePath mocks base method.
func (m *MockYproxyClient) ExternalFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExternalFilePath indicates an expected call of ExternalFilePath.
func (mr *MockYproxyClientMockRecorder) ExternalFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalFilePath", reflect.TypeOf((*MockYproxyClient)(nil).ExternalFilePath))
}

// GetRW mocks base method.
func (m *MockYproxyClient) GetRW() io.ReadWriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRW")
	ret0, _ := ret[0].(io.ReadWriteCloser)
	return ret0
}

// GetRW indicates an expected call of GetRW.
func (mr *MockYproxyClientMockRecorder) GetRW() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRW", reflect.TypeOf((*MockYproxyClient)(nil).GetRW))
}

// ID mocks base method.
func (m *MockYproxyClient) ID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockYproxyClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockYproxyClient)(nil).ID))
}

// OPStart mocks base method.
func (m *MockYproxyClient) OPStart() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OPStart")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// OPStart indicates an expected call of OPStart.
func (mr *MockYproxyClientMockRecorder) OPStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPStart", reflect.TypeOf((*MockYproxyClient)(nil).OPStart))
}

// OPType mocks base method.
func (m *MockYproxyClient) OPType() message.MessageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OPType")
	ret0, _ := ret[0].(message.MessageType)
	return ret0
}

// OPType indicates an expected call of OPType.
func (mr *MockYproxyClientMockRecorder) OPType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPType", reflect.TypeOf((*MockYproxyClient)(nil).OPType))
}

// ReplyError mocks base method.
func (m *MockYproxyClient) ReplyError(err error, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyError", err, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyError indicates an expected call of ReplyError.
func (mr *MockYproxyClientMockRecorder) ReplyError(err, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyError", reflect.TypeOf((*MockYproxyClient)(nil).ReplyError), err, msg)
}

// SetByteOffset mocks base method.
func (m *MockYproxyClient) SetByteOffset(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetByteOffset", arg0)
}

// SetByteOffset indicates an expected call of SetByteOffset.
func (mr *MockYproxyClientMockRecorder) SetByteOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetByteOffset", reflect.TypeOf((*MockYproxyClient)(nil).SetByteOffset), arg0)
}

// SetExternalFilePath mocks base method.
func (m *MockYproxyClient) SetExternalFilePath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExternalFilePath", path)
}

// SetExternalFilePath indicates an expected call of SetExternalFilePath.
func (mr *MockYproxyClientMockRecorder) SetExternalFilePath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExternalFilePath", reflect.TypeOf((*MockYproxyClient)(nil).SetExternalFilePath), path)
}

// SetOPType mocks base method.
func (m *MockYproxyClient) SetOPType(optype message.MessageType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOPType", optype)
}

// SetOPType indicates an expected call of SetOPType.
func (mr *MockYproxyClientMockRecorder) SetOPType(optype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOPType", reflect.TypeOf((*MockYproxyClient)(nil).SetOPType), optype)
}
