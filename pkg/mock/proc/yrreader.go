// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/proc/yrreader.go
//
// Generated by this command:
//
//	mockgen -source=pkg/proc/yrreader.go -destination=pkg/mock/proc/yrreader.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRestartReader is a mock of RestartReader interface.
type MockRestartReader struct {
	ctrl     *gomock.Controller
	recorder *MockRestartReaderMockRecorder
}

// MockRestartReaderMockRecorder is the mock recorder for MockRestartReader.
type MockRestartReaderMockRecorder struct {
	mock *MockRestartReader
}

// NewMockRestartReader creates a new mock instance.
func NewMockRestartReader(ctrl *gomock.Controller) *MockRestartReader {
	mock := &MockRestartReader{ctrl: ctrl}
	mock.recorder = &MockRestartReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestartReader) EXPECT() *MockRestartReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRestartReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRestartReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRestartReader)(nil).Close))
}

// Read mocks base method.
func (m *MockRestartReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRestartReaderMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRestartReader)(nil).Read), p)
}

// Restart mocks base method.
func (m *MockRestartReader) Restart(offsetStart int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", offsetStart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockRestartReaderMockRecorder) Restart(offsetStart any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockRestartReader)(nil).Restart), offsetStart)
}
